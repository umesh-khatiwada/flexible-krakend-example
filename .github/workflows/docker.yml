name: Krakend Update ConfigMap

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  update-config:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create tmp directory
        run: mkdir -p tmp

      - name: Run Krakend template with official image
        run: |
          docker run --rm \
            -v "$PWD:/krakend" \
            -w /krakend \
            -e FC_ENABLE=1 \
            -e FC_SETTINGS=config/settings/prod \
            -e FC_PARTIALS=config/partials \
            -e FC_TEMPLATES=config/templates \
            -e FC_OUT=/tmp/out.json \
            -e SERVICE_NAME="KrakenD API Gateway" \
            krakend:2.9 check -tdc krakend.tmpl

          # Copy the output file from the container's /tmp to the host's tmp dir
          container_id=$(docker create \
            -v "$PWD:/krakend" \
            krakend:2.9)
          docker cp "$container_id":/tmp/out.json ./tmp/out.json
          docker rm "$container_id"

      - name: Upload output JSON as artifact
        uses: actions/upload-artifact@v4
        with:
          name: krakend-out
          path: tmp/out.json

      - name: Decode kubeconfig secret
        run: |
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > kubeconfig.yaml

      - name: Create or update krakend ConfigMap
        env:
          KUBECONFIG: kubeconfig.yaml
        run: |
          set -e
          if kubectl -n krakend get configmap krakend-configmap > /dev/null 2>&1; then
            echo "ConfigMap exists. Updating..."
            kubectl create configmap krakend-configmap \
              --from-file=krakend.json=tmp/out.json \
              -o yaml --dry-run=client \
              | kubectl apply --validate=false -f -
          else
            echo "ConfigMap does not exist. Creating..."
            kubectl create configmap krakend-configmap \
              --from-file=krakend.json=tmp/out.json \
              -n krakend
          fi
